{{>header}}

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import FormData from 'form-data';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { CancelablePromise } from './CancelablePromise';
import type { OnCancel } from './CancelablePromise';
import type { OpenAPIConfig } from './OpenAPI';
import type { BadGateway } from '../models/BadGateway';
import type { Forbidden } from '../models/Forbidden';
import type { InternalServerError } from '../models/InternalServerError';
import type { NotFound } from '../models/NotFound';
import type { ServiceUnavailable } from '../models/ServiceUnavailable';
import type { Unauthorized } from '../models/Unauthorized';
import type { NetworkUnknownError } from '../models/NetworkUnknownError';
import type { NetworkError } from '../models/NetworkError';
import type { BadRequest } from '../models/BadRequest';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/isSuccess}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>axios/getHeaders}}


{{>axios/getRequestBody}}


{{>axios/sendRequest}}


{{>axios/getResponseHeader}}


{{>axios/getResponseBody}}


{{>functions/parseErrorCodes}}

/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(config: OpenAPIConfig, options: ApiRequestOptions): CancelablePromise<T | BadGateway | Forbidden | InternalServerError | NotFound | ServiceUnavailable | Unauthorized | NetworkUnknownError | NetworkError | BadRequest> => {
	return new CancelablePromise(async (resolve, reject, onCancel) => {
		try {
			const url = getUrl(config, options);
			const formData = getFormData(options);
			const body = getRequestBody(options);
			const headers = await getHeaders(config, options, formData);

			if (!onCancel.isCancelled) {
				const response = await sendRequest<T>(config, options, url, body, formData, headers, onCancel, options.axiosOptions);
				const responseBody = getResponseBody(response);
				const responseHeader = getResponseHeader(response, options.responseHeader);

				const result: ApiResult = {
					url,
					ok: isSuccess(response.status),
					status: response.status,
					statusText: response.statusText,
					body: responseHeader ?? responseBody,
				};

				const errorCode = parseErrorCodes(options, result);

				if (response.headers['content-type']?.includes('application/json') && (errorCode === 'BAD_REQUEST' || result.ok)) {
					resolve(result.body);
				} else {
					resolve({
						failure_code: errorCode,
						failure_message: errorCode,
					});
				}
			}
		} catch (error) {
			const errorMessage = error instanceof Error ? error.message : error;

			if ((error as AxiosError<unknown>).code === 'ECONNREFUSED') {
				resolve({
					failure_code: 'NETWORK_ERROR',
					failure_message: String(errorMessage),
				});
			}

			resolve({
				failure_code: 'UNKNOWN_ERROR',
				failure_message: String(errorMessage),
			});
		}
	});
};
